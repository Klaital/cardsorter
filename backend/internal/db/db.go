// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCardStmt, err = db.PrepareContext(ctx, createCard); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCard: %w", err)
	}
	if q.createLibraryStmt, err = db.PrepareContext(ctx, createLibrary); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLibrary: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCardStmt, err = db.PrepareContext(ctx, deleteCard); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCard: %w", err)
	}
	if q.deleteLibraryStmt, err = db.PrepareContext(ctx, deleteLibrary); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLibrary: %w", err)
	}
	if q.getCardStmt, err = db.PrepareContext(ctx, getCard); err != nil {
		return nil, fmt.Errorf("error preparing query GetCard: %w", err)
	}
	if q.getCardsStmt, err = db.PrepareContext(ctx, getCards); err != nil {
		return nil, fmt.Errorf("error preparing query GetCards: %w", err)
	}
	if q.getLibrariesStmt, err = db.PrepareContext(ctx, getLibraries); err != nil {
		return nil, fmt.Errorf("error preparing query GetLibraries: %w", err)
	}
	if q.getLibraryStmt, err = db.PrepareContext(ctx, getLibrary); err != nil {
		return nil, fmt.Errorf("error preparing query GetLibrary: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.moveCardStmt, err = db.PrepareContext(ctx, moveCard); err != nil {
		return nil, fmt.Errorf("error preparing query MoveCard: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCardStmt != nil {
		if cerr := q.createCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCardStmt: %w", cerr)
		}
	}
	if q.createLibraryStmt != nil {
		if cerr := q.createLibraryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLibraryStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCardStmt != nil {
		if cerr := q.deleteCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCardStmt: %w", cerr)
		}
	}
	if q.deleteLibraryStmt != nil {
		if cerr := q.deleteLibraryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLibraryStmt: %w", cerr)
		}
	}
	if q.getCardStmt != nil {
		if cerr := q.getCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardStmt: %w", cerr)
		}
	}
	if q.getCardsStmt != nil {
		if cerr := q.getCardsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardsStmt: %w", cerr)
		}
	}
	if q.getLibrariesStmt != nil {
		if cerr := q.getLibrariesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLibrariesStmt: %w", cerr)
		}
	}
	if q.getLibraryStmt != nil {
		if cerr := q.getLibraryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLibraryStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.moveCardStmt != nil {
		if cerr := q.moveCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing moveCardStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                DBTX
	tx                *sql.Tx
	createCardStmt    *sql.Stmt
	createLibraryStmt *sql.Stmt
	createUserStmt    *sql.Stmt
	deleteCardStmt    *sql.Stmt
	deleteLibraryStmt *sql.Stmt
	getCardStmt       *sql.Stmt
	getCardsStmt      *sql.Stmt
	getLibrariesStmt  *sql.Stmt
	getLibraryStmt    *sql.Stmt
	getUserStmt       *sql.Stmt
	moveCardStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                tx,
		tx:                tx,
		createCardStmt:    q.createCardStmt,
		createLibraryStmt: q.createLibraryStmt,
		createUserStmt:    q.createUserStmt,
		deleteCardStmt:    q.deleteCardStmt,
		deleteLibraryStmt: q.deleteLibraryStmt,
		getCardStmt:       q.getCardStmt,
		getCardsStmt:      q.getCardsStmt,
		getLibrariesStmt:  q.getLibrariesStmt,
		getLibraryStmt:    q.getLibraryStmt,
		getUserStmt:       q.getUserStmt,
		moveCardStmt:      q.moveCardStmt,
	}
}
