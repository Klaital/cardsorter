// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createCard = `-- name: CreateCard :execresult
INSERT INTO cards (library_id, name, set_name, cnd, foil, collector_num, usd)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateCardParams struct {
	LibraryID    int64        `json:"library_id"`
	Name         string       `json:"name"`
	SetName      string       `json:"set_name"`
	Cnd          string       `json:"cnd"`
	Foil         sql.NullBool `json:"foil"`
	CollectorNum string       `json:"collector_num"`
	Usd          int32        `json:"usd"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (sql.Result, error) {
	return q.exec(ctx, q.createCardStmt, createCard,
		arg.LibraryID,
		arg.Name,
		arg.SetName,
		arg.Cnd,
		arg.Foil,
		arg.CollectorNum,
		arg.Usd,
	)
}

const createLibrary = `-- name: CreateLibrary :execresult
INSERT INTO libraries (user_id, name)
VALUES (?, ?)
`

type CreateLibraryParams struct {
	UserID int64  `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) CreateLibrary(ctx context.Context, arg CreateLibraryParams) (sql.Result, error) {
	return q.exec(ctx, q.createLibraryStmt, createLibrary, arg.UserID, arg.Name)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (email, password_hash)
VALUES (?, ?)
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, createUser, arg.Email, arg.PasswordHash)
}

const deleteCard = `-- name: DeleteCard :exec
DELETE FROM cards
WHERE id = ?
`

func (q *Queries) DeleteCard(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteCardStmt, deleteCard, id)
	return err
}

const deleteLibrary = `-- name: DeleteLibrary :exec
DELETE FROM libraries
WHERE id = ? AND user_id = ?
`

type DeleteLibraryParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteLibrary(ctx context.Context, arg DeleteLibraryParams) error {
	_, err := q.exec(ctx, q.deleteLibraryStmt, deleteLibrary, arg.ID, arg.UserID)
	return err
}

const getCard = `-- name: GetCard :one
SELECT id, library_id, name, set_name, collector_num, cnd, foil, usd, created_at, updated_at FROM cards
WHERE id = ?
`

func (q *Queries) GetCard(ctx context.Context, id int64) (Card, error) {
	row := q.queryRow(ctx, q.getCardStmt, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.LibraryID,
		&i.Name,
		&i.SetName,
		&i.CollectorNum,
		&i.Cnd,
		&i.Foil,
		&i.Usd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCards = `-- name: GetCards :many
SELECT id, library_id, name, set_name, collector_num, cnd, foil, usd, created_at, updated_at FROM cards
WHERE library_id = ?
`

func (q *Queries) GetCards(ctx context.Context, libraryID int64) ([]Card, error) {
	rows, err := q.query(ctx, q.getCardsStmt, getCards, libraryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.LibraryID,
			&i.Name,
			&i.SetName,
			&i.CollectorNum,
			&i.Cnd,
			&i.Foil,
			&i.Usd,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLibraries = `-- name: GetLibraries :many
SELECT id, user_id, name, created_at, updated_at FROM libraries
WHERE user_id = ?
`

func (q *Queries) GetLibraries(ctx context.Context, userID int64) ([]Library, error) {
	rows, err := q.query(ctx, q.getLibrariesStmt, getLibraries, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Library
	for rows.Next() {
		var i Library
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLibrary = `-- name: GetLibrary :one
SELECT id, user_id, name, created_at, updated_at FROM libraries
WHERE id = ? AND user_id = ?
`

type GetLibraryParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetLibrary(ctx context.Context, arg GetLibraryParams) (Library, error) {
	row := q.queryRow(ctx, q.getLibraryStmt, getLibrary, arg.ID, arg.UserID)
	var i Library
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password_hash, created_at, updated_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const moveCard = `-- name: MoveCard :exec
UPDATE cards
SET library_id = ?
WHERE id = ?
`

type MoveCardParams struct {
	LibraryID int64 `json:"library_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) MoveCard(ctx context.Context, arg MoveCardParams) error {
	_, err := q.exec(ctx, q.moveCardStmt, moveCard, arg.LibraryID, arg.ID)
	return err
}
