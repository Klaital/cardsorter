// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: protos/library.proto

package cardv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LibraryService_CreateLibrary_FullMethodName = "/library.v1.LibraryService/CreateLibrary"
	LibraryService_GetLibraries_FullMethodName  = "/library.v1.LibraryService/GetLibraries"
	LibraryService_GetLibrary_FullMethodName    = "/library.v1.LibraryService/GetLibrary"
	LibraryService_DeleteLibrary_FullMethodName = "/library.v1.LibraryService/DeleteLibrary"
)

// LibraryServiceClient is the client API for LibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryServiceClient interface {
	// CreateLibrary creates a new library for the authenticated user
	CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*CreateLibraryResponse, error)
	// GetLibraries returns all libraries owned by the authenticated user
	GetLibraries(ctx context.Context, in *GetLibrariesRequest, opts ...grpc.CallOption) (*GetLibrariesResponse, error)
	// GetLibrary returns a specific library by ID
	GetLibrary(ctx context.Context, in *GetLibraryRequest, opts ...grpc.CallOption) (*GetLibraryResponse, error)
	// DeleteLibrary deletes a specific library by ID
	DeleteLibrary(ctx context.Context, in *DeleteLibraryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type libraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryServiceClient(cc grpc.ClientConnInterface) LibraryServiceClient {
	return &libraryServiceClient{cc}
}

func (c *libraryServiceClient) CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*CreateLibraryResponse, error) {
	out := new(CreateLibraryResponse)
	err := c.cc.Invoke(ctx, LibraryService_CreateLibrary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetLibraries(ctx context.Context, in *GetLibrariesRequest, opts ...grpc.CallOption) (*GetLibrariesResponse, error) {
	out := new(GetLibrariesResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetLibraries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetLibrary(ctx context.Context, in *GetLibraryRequest, opts ...grpc.CallOption) (*GetLibraryResponse, error) {
	out := new(GetLibraryResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetLibrary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) DeleteLibrary(ctx context.Context, in *DeleteLibraryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LibraryService_DeleteLibrary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibraryServiceServer is the server API for LibraryService service.
// All implementations must embed UnimplementedLibraryServiceServer
// for forward compatibility
type LibraryServiceServer interface {
	// CreateLibrary creates a new library for the authenticated user
	CreateLibrary(context.Context, *CreateLibraryRequest) (*CreateLibraryResponse, error)
	// GetLibraries returns all libraries owned by the authenticated user
	GetLibraries(context.Context, *GetLibrariesRequest) (*GetLibrariesResponse, error)
	// GetLibrary returns a specific library by ID
	GetLibrary(context.Context, *GetLibraryRequest) (*GetLibraryResponse, error)
	// DeleteLibrary deletes a specific library by ID
	DeleteLibrary(context.Context, *DeleteLibraryRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLibraryServiceServer()
}

// UnimplementedLibraryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibraryServiceServer struct {
}

func (UnimplementedLibraryServiceServer) CreateLibrary(context.Context, *CreateLibraryRequest) (*CreateLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLibrary not implemented")
}
func (UnimplementedLibraryServiceServer) GetLibraries(context.Context, *GetLibrariesRequest) (*GetLibrariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibraries not implemented")
}
func (UnimplementedLibraryServiceServer) GetLibrary(context.Context, *GetLibraryRequest) (*GetLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibrary not implemented")
}
func (UnimplementedLibraryServiceServer) DeleteLibrary(context.Context, *DeleteLibraryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLibrary not implemented")
}
func (UnimplementedLibraryServiceServer) mustEmbedUnimplementedLibraryServiceServer() {}

// UnsafeLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServiceServer will
// result in compilation errors.
type UnsafeLibraryServiceServer interface {
	mustEmbedUnimplementedLibraryServiceServer()
}

func RegisterLibraryServiceServer(s grpc.ServiceRegistrar, srv LibraryServiceServer) {
	s.RegisterService(&LibraryService_ServiceDesc, srv)
}

func _LibraryService_CreateLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).CreateLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_CreateLibrary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).CreateLibrary(ctx, req.(*CreateLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetLibraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibrariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetLibraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetLibraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetLibraries(ctx, req.(*GetLibrariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetLibrary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetLibrary(ctx, req.(*GetLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_DeleteLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).DeleteLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_DeleteLibrary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).DeleteLibrary(ctx, req.(*DeleteLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibraryService_ServiceDesc is the grpc.ServiceDesc for LibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.v1.LibraryService",
	HandlerType: (*LibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLibrary",
			Handler:    _LibraryService_CreateLibrary_Handler,
		},
		{
			MethodName: "GetLibraries",
			Handler:    _LibraryService_GetLibraries_Handler,
		},
		{
			MethodName: "GetLibrary",
			Handler:    _LibraryService_GetLibrary_Handler,
		},
		{
			MethodName: "DeleteLibrary",
			Handler:    _LibraryService_DeleteLibrary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/library.proto",
}
